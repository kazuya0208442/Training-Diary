version: "3.9"

# コンテナの起動順序は、db -> app -> proxy
services:

  app:
    build:
      context: .
    # restart: always にすることで、crushしたときに自動的にappがリスタートするように設定する。本番環境での安定性を向上させる。
    restart: always
    # /app/vol/web/static のデータをstatic-dataに紐づける。これでproxyがアクセスできる。
    volumes:
      - static-data:/app/vol/web/static

    # 環境変数を決定するときは${ENV}のように、変数を使う。
    # パスワードなどを直接書き込むのではなく、外部のファイルから読み込む。
    # これで、パスワードなどの機密情報をGit repoに挙げなくて済む。
    # 環境変数はdeployするサーバーで、.env ファイルを置くことで決定する。
    # Git には一旦、dummy の.env.sampleを置いておくとよい。
    
    # データベースを使うときの環境変数の設定
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    # データベースが先に立ち上がってから、appが起動する。
    depends_on:
      - db

  db:
    # image をdocker-hub から取得
    image: postgres:13-alpine
    # restart: always にすることで、crushしたときに自動的にdbがリスタートするように設定する。本番環境での安定性を向上させる。
    restart: always
    # container が消えてもデータが残るように/var/lib/postgresql/dataのデータをpostgres-dataに紐づける。
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # 構文を使用して環境変数を設定する。
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}

  # reverse proxy の設定
  proxy:
    # build context をproxy/ directoryに設定する。
    # これで、root directoryのDockerfileではなく、proxy/Dockerfileを使うことができる。
    build:
      context: ./proxy
    
    # restart: always にすることで、crushしたときに自動的にproxyがリスタートするように設定する。本番環境での安定性を向上させる。
    restart: always
    # app が先に起動する。appが先に立ち上がっていないと、appにアクセスできるようなネットワークを作れない。
    depends_on:
      - app
    # hostのHTTP80番ポートとproxy container の8000番ポートをつなげる。これにより、HTTP port(80)からリクエストを受け取るようになる。
    ports:
      - 80:8000
    # コンテナ内の static-data volume を /vol/static にマップする
    # proxy が static-data volume を通じて、/vol/static にアクセスできる
    # proxy が静的ファイルをリクエスト先に返すことができる。
    volumes:
      - static-data:/vol/static

# Docker Composeで管理する名前付きのvolume
# このvolumeにより、コンテナを削除した後も中身のデータは保存される
# データの読み取り、書き取りを効率的に行う

# これで、メディアファイルはプロジェクト内のdata/web/に保存されるのではなく、
# static-data という名前付きのvolumeに保存されるようになる。
# メディアファイルはproxyからserveされるようになる。
volumes:
  # PostgreSQL database のデータを保存
  postgres-data:

  # 静的データとメディアファイルを保存
  static-data: